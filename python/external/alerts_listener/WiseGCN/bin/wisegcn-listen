#!/usr/bin/env python
import logging
from logging.handlers import TimedRotatingFileHandler
import getopt
import argparse
import sys
import shutil
import gcn
from wisegcn.handler import process_gcn


def usage():
    parser = argparse.ArgumentParser(
        description='''Listen to GCN/TAN VOEvents, respond to GW alerts, and prepare them for followup observations at 
        the Wise Observatory.'''
    )
    parser.add_argument("-c", "--config", metavar="config_file", help="""path to config.ini file (default: config.ini).
                                                                      NOTE: the config file will be copied to the 
                                                                      current directory as "config.ini""""",
                        default="config.ini")
    parser.add_argument("-l", "--log", metavar="log_file", help="path to the log file (default: pygcn.log)",
                        default="pygcn.log")
    parser.parse_args()


def init_log(filename="pygcn.log"):
    # Create GCN logger
    gcn_log = logging.getLogger(__name__)
    gcn_log.setLevel(logging.DEBUG)

    # console handler
    h = logging.StreamHandler()
    h.setLevel(logging.INFO)
    formatter = logging.Formatter(
            "%(asctime)s - %(levelname)s [%(filename)s:%(lineno)s]: %(message)s", "%Y-%m-%d %H:%M:%S")
    h.setFormatter(formatter)
    gcn_log.addHandler(h)

    # log file handler
    h = TimedRotatingFileHandler(filename, when="midnight", interval=1, encoding=None, delay="true")
    h.suffix = "%Y%m%d"
    h.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        "%(asctime)s - %(levelname)s [%(filename)s:%(lineno)s]: %(message)s", "%Y-%m-%d %H:%M:%S")
    h.setFormatter(formatter)
    gcn_log.addHandler(h)

    return gcn_log


def main(argv):
    try:
        opts, args = getopt.getopt(argv, "c:l:h", ["config=", "log=", "help"])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)

    log_file = "pygcn.log"
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(2)
        elif opt in ("-c", "--config"):
            # copy the config file to the current directory
            try:
                print("Copying the config file to the current folder.")
                shutil.copyfile(arg, "config.ini")
            except shutil.SameFileError as err:
                print(err)
                print("Didn't copy config.ini.")
        elif opt in ("-l", "--log"):
            log_file = arg

    # Listen for GCN notices (until interrupted or killed)
    gcn_log = init_log(log_file)
    gcn_log.info("Listening to GCN notices (press Ctrl+C to kill)...")
    gcn.listen(handler=process_gcn, log=gcn_log)


if __name__ == '__main__':
    main(sys.argv[1:])
