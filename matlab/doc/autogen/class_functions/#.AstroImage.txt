Class: AstroImage

AstroImage - Constructor and image reader for AstroImage class

astroImage2AstroCatalog - Convert the CataData in AstroImage object into an AstroCatalog object array.

astroImage2ImageComponent - Convert an AstroImage data into SciImage, BackImage, etc. objects.

cast - Cast the image/back/var data in AstroImage (transform to a new type)

conv - Convolve images with their PSF, or another PSF

copyElement - Custom copy of object properties Called from copy() of matlab.mixin.Copyable decendents

crop - crop an AstroImage images and catalogs and update WCS

filter - Filter images with their PSF, or another PSF

funBinary - Apply a binary operator to AstroImage

funBinaryImVar - Apply a binary operator with error propagation to the ImageData and VarData in an AstroImage object.

funBinaryProp - Apply binary function on a single property of AstroImage without error propagation.

funCat - Apply function of Cat properties in AstroImage array This function doesn't create a new object

funHeader - Apply function of HeaderData properties in AstroImage array This function doesn't create a new object

funHeaderScalar - Apply function that return a scalae on HeaderData properties in AstroImage array

funPSF - Apply function of PSF properties in AstroImage array

funUnary - Apply an unary function on AstroImage object. This include applying the function  on specific data fields, and or image sections (CCDSEC), and error propagation. Note that error propgation is activated using the

funUnaryScalar - Apply a unary operator that return scalar on AstroImage and return an numeric array

funWCS - Apply function of WCS properties in AstroImage array

get.Back - getter for BackImage

get.Header - getter for Header

get.Image - getter for Image - get image from ImageData property

get.Key - getter for Header keys

get.Mask - getter for MaskImage

get.Var - getter for VarImage

get.WCS - getter for WCS if empty, attempt to create from header

getStructKey - Get multiple  keys from headers in multiple AstroImage and store in a structure array The keyword search can be exact (UseDict=false), or using a keywords dictionary (UseDict=true).

imageIO2AstroImage - Convert an ImageIO object into an AstroImage object

isImType - Check if header IMTYPE keyword value equal some type

isemptyImage - Check if data images in AstroImage object are empty

julday - Return the Julian day for AstroImage object

maskSet - Set the value of a bit in a bit mask (Maskdata) in AstroImage

minus - Apply the minus operator between AstroImage objects. This function utilize the funBinary method. See funBinary for details and additional arguments. Example: AI = AstroImage({ones(10,10), 2.*ones(20,20)}); R = AI - AI

object2array - Convert an AstroImage object that contains scalars into an array

perfTest - perfTest for the AstroImage class

perfTestMat - Low level perfTest for the Matlab matrix

plus - Apply the plus operator between AstroImage objects. This function utilize the funBinary method. See funBinary for details and additional arguments. Example: AI = AstroImage({ones(10,10), 2.*ones(20,20)}); R = AI + AI

prepOperand2 - Prepare the 2nd operand for binary operation

propagateWCS - Given An AstroImage with WCS property, propagate it to the header and catalog

rdivide - Apply the rdivide operator between AstroImage objects. This function utilize the funBinary method. See funBinary for details and additional arguments. Example: AI = AstroImage({ones(10,10), 2.*ones(20,20)}); R = AI ./ AI

readImages2AstroImage - Create AstroImage object and read images into a specific property.

set.Back - setter for BackImage

set.Image - setter for Image - store image in ImageData property Obj.(Relations.Image).Image = Data;   can use this instead

set.Mask - setter for MaskImage

set.Var - setter for VarImage

setKeyVal - Replace/insert keyword/value to HeaderData in AstroImage

sizeImage - Return the size of images in AstroImage object

times - Apply the times operator between AstroImage objects. This function utilize the funBinary method. See funBinary for details and additional arguments. Example: AI = AstroImage({ones(10,10), 2.*ones(20,20)}); R = AI .* AI

unitTest - unitTest for AstroImage Example: AstroImage.unitTest

