function [A,B,Theta,X0,L]=transformRadonCoo(RadonCoo1, RadonCoo2, RadonCoo3, SizeImage, SizeSubFrame, RadonStep, IsFinal)
    % Convert coordinate in a partial Radon image to line parameters in image
    %   The partial Radon Transform is a 3-D matrix generated by the partial FRT
    %   output of imUtil.frt.frt
    %   Note that the final FRT image are the first and 3rd dimensions of
    %   the corresponding partial FRT.
    % Input  : - Coordinate in the 1st dime of the partial FRT.
    %          - Coordinate in the 2nd dime of the partial FRT.
    %          - Coordinate in the 3rd dime of the partial FRT.
    %          - Image size on which the FRT was performed.
    %          - Size of the partial FRT cube.
    %          - Partial FRT step. I.e., The partial FRT retruned by
    %            imUtil.frt.frt is a cell array of cubes. The Step number
    %            is the cell element index of the corresponding cube
    %            (partial FRT).
    %          - A logical indicating if the  SizeSubFrame corresponds to
    %            the final squeezed FRT image (true), or to the last
    %            partial radon transform (before squeezing.
    %            Default is false.
    % Output : - Line slope parameter (a), defined by: Y=a*x+b
    %          - Line intersection parameter (b), defined by Y=a*x+b
    %          - Line slope in degrees (Theta), measured relative to the X
    %            axis.
    %          - (X0) Y intersection @ X=0
    %          - Line length measured from the begining to end of the
    %            image or sub image.
    % Author : Eran Ofek (Jul 2023) Based on https://github.com/guynir42/radon
    % Reference:
    % Example: Im=imUtil.kernel2.line([2050,1,20],[2048 2048]); % line with -20 deg slope.
    %          [R,P] = imUtil.frt.frt(Im,'NumThreads',4,'Partial',true); 
    %          [Max, PeakI]=tools.math.stat.maxnd(R);  Search peak in FRT
    %          [A,B,Theta,X0,L]=imUtil.frt.transformRadonCoo(PeakI(1), 1, PeakI(2), size(Im), size(P{end}), numel(P));
    
    arguments
        RadonCoo1
        RadonCoo2
        RadonCoo3
        SizeImage
        SizeSubFrame
        RadonStep
        IsFinal logical    = false;
    end
    
    if IsFinal
        SizeSubFrame = [SizeSubFrame(1), 1, SizeSubFrame(2)];
    end
    
    X1      = (2.^RadonStep) .* (RadonCoo2-1) + 1;
    X2      = (2.^RadonStep) .*  RadonCoo2;
    RadonY  = RadonCoo1;
    RadonDY = RadonCoo3 - ceil(SizeSubFrame(3).*0.5);
    RadonDX = X2 - X1 + 1;
    Offset  = floor(0.5.*(SizeSubFrame(1) - SizeImage(1)));
    
    A       = RadonDY./RadonDX;          % slope
    B       = RadonY - Offset - X1.*A;   % Y intersection @ X=0
    X0      = -B./A;                     % X at which Y=0
    Theta   = atand(A);                  % slope [deg] - inverted when transpose=true
    L       = RadonDX./cosd(Theta);
    
end
    