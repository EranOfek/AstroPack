function AllFiles = classifyAllFiles(Args)
    % Classify matlab-related files.
    %   This function recursively select all files under some directory.
    %   It classify the files and directory.
    %   The classification is described in the outpu.
    % Input  : * ...,key,val,...
    %            'Path' - Directory under which to select all files
    %                   recursively. If empty, use tools.os.getAstroPackPath
    %                   which return the name of the AstroPack path.
    %                   Default is [].
    %            'FileTemplate' - File name template to search.
    %                   Default is '*'.
    %            'SearchExtensions' - A cell array of file extension to classify.
    %                   Default is {'.m','.cpp','.c','.mlx'}.
    % Output : - A structure array of file names like the dir function
    %            output, and with the following additional fields:
    %            .IsPackageDir - True if a dir is a package (start with +).
    %            .IsClassDir - true if a dir is a class (start with @).
    %            .FileInPackage - true if file resides inside a package.
    %            .FileInClass - true if file resides inside a class.
    %            .IsContentFile - is a 'content.m' file.
    %            .IsUnitTestFile - is a 'unitTest.m' file.
    %            .Extension - File extension (e.g., '.m').
    %            .PackNames - A cell array of pacakge names identified in
    %                   the folder name (without the leading +).
    %            .Report - If an .m file than this is a tructure with the
    %                       following fields (generated by
    %                       tools.code.analyzeMfile):
    %                   .IsCalss
    %                   .StartPosFunctions
    %                   .NumFunctions
    %                   .Lines
    %                   .DescriptionLine
    %                   .Help
    %                   .Author
    %                   .Month
    %                   .Year
    % Author : Eran Ofek (May 2022)
    % Example: AllFiles = tools.code.classifyAllFiles
    %          % Identify all .m files without Author name
    %          Im=find(strcmp({AllFiles.Extension},'.m') & ~[AllFiles.IsUnitTestFile] & ~[AllFiles.IsContentFile]);
    %          Ina = find(cellfun(@isempty,{AllFiles(Im).Author}));
       
    arguments
        Args.Path               = [];
        Args.FileTemplate       = '*';
        Args.SearchExtensions   = {'.m','.cpp','.c','.mlx'};
    end
    
    if isempty(Args.Path)
        Args.Path = tools.os.getAstroPackPath;
    end
    
    Next = numel(Args.SearchExtensions);
    
    PWD = pwd;
    cd(Args.Path);
    
    AllFiles = io.files.rdir(Args.FileTemplate);
    
    Nf = numel(AllFiles);
    [AllFiles(1:1:Nf).IsPackageDir]        = deal(false);
    [AllFiles(1:1:Nf).IsClassDir]          = deal(false);
    [AllFiles(1:1:Nf).FileInPackage]       = deal(false);
    [AllFiles(1:1:Nf).FileInClass]         = deal(false);
    [AllFiles(1:1:Nf).IsContentFile]       = deal(false);
    [AllFiles(1:1:Nf).IsUnitTestFile]      = deal(false);
    [AllFiles(1:1:Nf).Extension]           = deal('');
    [AllFiles(1:1:Nf).IsClass]             = deal(false);
    [AllFiles(1:1:Nf).StartPosFunctions]   = deal('');
    [AllFiles(1:1:Nf).NumFunctions]        = deal('');
    [AllFiles(1:1:Nf).Lines]               = deal('');
    [AllFiles(1:1:Nf).DescriptionLine]     = deal('');
    [AllFiles(1:1:Nf).Help]                = deal('');
    [AllFiles(1:1:Nf).Author]              = deal('');
    [AllFiles(1:1:Nf).Month]               = deal('');
    [AllFiles(1:1:Nf).Year]                = deal('');
    
    for If=1:1:Nf
        % for each file/dir
        AllFiles(If).PackNames = tools.code.identifySubPackagesInFolder(AllFiles(If).folder);
        if AllFiles(If).isdir
            % Directory - check if package/class
            switch AllFiles(If).name(1)
                case '+'
                    % a package dir
                    AllFiles(If).IsPackageDir = true;
                case '@'
                    % a class dir
                    AllFiles(If).IsClassDir   = true;
                otherwise
                    % do nothing
            end
            
        else
            % File
            
            % check if content file
            switch AllFiles(If).name
                case 'content.m'
                    AllFiles(If).IsContentFile = true;
                case 'unitTest.m'
                    AllFiles(If).IsUnitTestFile = true;
                otherwise
            end
            
            % Check if file resides in a package
            if contains(AllFiles(If).folder, '+')
                AllFiles(If).FileInPackage = true;
            end
            
            % Check if file resides in a class
            if contains(AllFiles(If).folder, '@')
                AllFiles(If).FileInClass = true;
            end
            
            % Check file extension
            switch AllFiles(If).name(1)
                case '.'
                    % a hiddem file
                    
                otherwise
                    % search for one of the request file extensions
                    [~,Name,Ext] = fileparts(AllFiles(If).name);
                    if ~isempty(Ext)
                        for Iext=1:1:Next
                            if strcmp(Ext, Args.SearchExtensions{Iext})
                                % extension found
                                AllFiles(If).Extension = Ext;
                            end
                        end
                    end
            end
            
            % Check the file content only if identified extension
            switch AllFiles(If).Extension
                case '.m'
                    FileName = fullfile(AllFiles(If).folder, AllFiles(If).name);
                    IsClass = tools.code.isClass(FileName);
                    if IsClass
                        HelpInHead = true;
                    else
                        HelpInHead = false;
                    end
                    Report = tools.code.analyzeMfile(FileName, 'HelpInHead',HelpInHead);
                    FieldNames = fieldnames(Report);
                    Nfield     = numel(FieldNames);
                    for Ifield=1:1:Nfield
                        AllFiles(If).(FieldNames{Ifield}) = Report.(FieldNames{Ifield});
                    end
                    
                    if AllFiles(If).IsClass
                        AllFun = tools.code.breakClassToFunctions(FileName);
                        Nfun = numel(AllFun);
                        for Ifun=1:1:Nfun
                            try
                            AllFiles(If).ClassFuns(Ifun) = tools.code.analyzeMfile(AllFun(Ifun).Text);
                            catch
                                'a'
                            end
                        end
                    end
                    
                otherwise
            end
            
        end
    end
    
    cd(PWD);
end


