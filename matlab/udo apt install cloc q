cloc(1)                          User Commands                         cloc(1)

NNAAMMEE
       cloc - Count, or compute differences of, lines of source code and
       comments.

SSYYNNOOPPSSIISS
         cloc [options] <FILE|DIR> ...

DDEESSCCRRIIPPTTIIOONN
       Count, or compute differences of, physical lines of source code in the
       given files (may be archives such as compressed tarballs or zip files,
       or git commit hashes or branch names) and/or recursively below the
       given directories.  It is written entirely in Perl, using only modules
       from the standard distribution.

OOPPTTIIOONNSS
   IInnppuutt OOppttiioonnss
       To count standard input, use the special filename -- and either
       ----ssttddiinn--nnaammee==FFIILLEE to tell cloc the name of the file being piped in, or
       ----ffoorrccee--llaanngg==LLAANNGG to apply the LANG counter to all input.

       ----eexxttrraacctt--wwiitthh==CCMMDD
           This option is only needed if cloc is unable to figure out how to
           extract the contents of the input file(s) by itself. Use CMD to
           extract binary archive files (e.g.: .tar.gz, .zip, .Z). Use the
           literal '>FILE<' as a stand-in for the actual file(s) to be
           extracted. For example, to count lines of code in the input files
           gcc-4.2.tar.gz perl-5.8.8.tar.gz on Unix use:

               --extract-with='gzip -dc >FILE< | tar xf -

           or, if you have GNU tar:

               --extract-with='tar zxf >FILE<'

           and on Windows, use, for example:

               --extract-with="\"c:\Program Files\WinZip\WinZip32.exe\" -e -o >FILE<

       ----lliisstt--ffiillee==FFIILLEE
           Take the list of file and/or directory names to process from FILE,
           which has one file/directory name per line.  Only exact matches are
           counted; relative path names will be resolved starting from the
           directory where cloc is invoked.  See also ----eexxcclluuddee--lliisstt--ffiillee

       ----vvccss==VVCCSS
           Invoke a system call to VCS to obtain a list of files to work on.
           If VCS is 'git', then will invoke 'git ls-files' to get a file list
           and 'git submodule status' to get a list of submodules whose
           contents will be ignored.  See also --git which accepts git commit
           hashes and branch names.  If VCS is 'svn' then will invoke 'svn
           list -R'.  The primary benefit is that cloc will then skip files
           explicitly excluded by the versioning tool in question, ie, those
           in .gitignore or have the svn:ignore property.  Alternatively VCS
           may be any system command that generates a list of files.  Note:
           cloc must be in a directory which can read the files as they are
           returned by VCS.  cloc will not download files from remote
           repositories.  'svn list -R' may refer to a remote repository to
           obtain file names (and therefore may require authentication to the
           remote repository), but the files themselves must be local.

       ----uunniiccooddee
           Check binary files to see if they contain Unicode expanded ASCII
           text.  This causes performance to drop noticeably.

   PPrroocceessssiinngg OOppttiioonnss
       ----aauuttooccoonnff
           Count .in files (as processed by GNU autoconf) of recognized
           languages.

       ----bbyy--ffiillee
           Report results for every source file encountered.

       ----bbyy--ffiillee--bbyy--llaanngg
           Report results for every source file encountered in addition to
           reporting by language.

       ----ccoouunntt--aanndd--ddiiffff SSEETT11 SSEETT22
           First perform direct code counts of source file(s) of SET1 and SET2
           separately, then perform a diff of these.  Inputs may be pairs of
           files, directories, or archives.  If --out or --report-file is
           given, three output files will be created, one for each of the two
           counts and one for the diff.  See also ----ddiiffff, ----ddiiffff--aalliiggnnmmeenntt,
           ----ddiiffff--ttiimmeeoouutt, ----iiggnnoorree--ccaassee, ----iiggnnoorree--wwhhiitteessppaaccee.

       ----ddiiffff SSEETT11 SSEETT22
           Compute differences in code and comments between source file(s) of
           SET1 and SET2.  The inputs may be pairs of files, directories, or
           archives.  Use ----ddiiffff--aalliiggnnmmeenntt to generate a list showing which
           file pairs where compared.  See also ----ccoouunntt--aanndd--ddiiffff,
           ----ddiiffff--aalliiggnnmmeenntt, ----ddiiffff--ttiimmeeoouutt, ----iiggnnoorree--ccaassee,
           ----iiggnnoorree--wwhhiitteessppaaccee.

       ----ddiiffff--ttiimmeeoouutt NN
           Ignore files which take more than N seconds to process.  Default is
           10 seconds.  (Large files with many repeated lines can cause
           _A_l_g_o_r_i_t_h_m_:_:_D_i_f_f_:_:_s_d_i_f_f_(_) to take hours.)

       ----ffoollllooww--lliinnkkss
           [Unix only] Follow symbolic links to directories (sym links to
           files are always followed).

       ----ffoorrccee--llaanngg==LLAANNGG[[,,EEXXTT]]
           Process all files that have a EXT extension with the counter for
           language LANG. For example, to count all .f files with the Fortran
           90 counter (which expects files to end with .f90) instead of the
           default Fortran 77 counter, use:

                   --force-lang="Fortran 90",f

           If EXT is omitted, every file will be counted with the LANG
           counter.  This option can be specified multiple times (but that is
           only useful when EXT is given each time). See also ----ssccrriipptt--llaanngg,
           ----llaanngg--nnoo--eexxtt.

       ----ffoorrccee--llaanngg--ddeeff==FFIILLEE
           Load language processing filters from FILE, then use these filters
           instead of the built-in filters.  Note:  languages which map to the
           same file extension (for example: MATLAB/Objective C/MUMPS;
           Pascal/PHP; Lisp/OpenCL; Lisp/Julia; Perl/Prolog) will be ignored
           as these require additional processing that is not expressed in
           language definition files.  Use ----rreeaadd--llaanngg--ddeeff to define new
           language filters without replacing built-in filters (see also
           ----wwrriittee--llaanngg--ddeeff).

       ----ggiitt
           Forces the inputs to be interpreted as git targets (commit hashes,
           branch names, et cetera) if these are not first identified as file
           or directory names.  This option overrides the --vcs=git logic if
           this is given; in other words, --git gets its list of files to work
           on directly from git using the hash or branch name rather than from
           'git ls-files'.  This option can be used with --diff to perform
           line count diffs between git commits, or between a git commit and a
           file, directory, or archive.  Use -v/--verbose to see the git
           system commands cloc issues.

       ----iiggnnoorree--wwhhiitteessppaaccee
           Ignore horizontal white space when comparing files with ----ddiiffff.
           See also ----iiggnnoorree--ccaassee.

       ----iiggnnoorree--ccaassee
           Ignore changes in case; consider upper- and lowercase letters
           equivalent when comparing files with ----ddiiffff.  See also
           ----iiggnnoorree--wwhhiitteessppaaccee.

       ----llaanngg--nnoo--eexxtt==LLAANNGG
           Count files without extensions using the LANG counter.  This option
           overrides internal logic for files without extensions (where such
           files are checked against known scripting languages by examining
           the first line for "#!").  See also ----ffoorrccee--llaanngg, ----ssccrriipptt--llaanngg.

       ----mmaaxx--ffiillee--ssiizzee==MMBB
           Skip files larger than "MB" megabytes when traversing directories.
           By default, "MB"=100.  cloc's memory requirement is roughly twenty
           times larger than the largest file so running with files larger
           than 100 MB on a computer with less than 2 GB of memory will cause
           problems.  Note:  this check does not apply to files explicitly
           passed as command line arguments.

       ----nnoo--aauuttooggeenn[[==lliisstt]]
           Ignore files generated by code-production systems such as GNU
           autoconf.  To see a list of these files (then exit), run with
           ----nnoo--aauuttooggeenn lliisstt See also ----aauuttooccoonnff.

       ----rreeaadd--bbiinnaarryy--ffiilleess
           Process binary files in addition to text files. This is usually a
           bad idea and should only be attempted with text files that have
           embedded binary data.

       ----rreeaadd--llaanngg--ddeeff==FFIILLEE
           Load new language processing filters from FILE and merge them with
           those already known to cloc.  If FILE defines a language cloc
           already knows about, cloc's definition will take precedence.  Use
           ----ffoorrccee--llaanngg--ddeeff to over-ride cloc's definitions.  (see also
           ----wwrriittee--llaanngg--ddeeff).

       ----ssccrriipptt--llaanngg==LLAANNGG,,SS
           Process all files that invoke "S" as a "#!" scripting language with
           the counter for language LANG. For example, files that begin with
           "#!/usr/local/bin/perl5.8.8" will be counted with the Perl counter
           by using

                   --script-lang=Perl,perl5.8.8

           The language name is case insensitive but the name of the script
           language executable, "S", must have the right case. This option can
           be specified multiple times. See also ----ffoorrccee--llaanngg.

       ----ssddiirr==DDIIRR
           Use DIR as the scratch directory instead of letting _F_i_l_e_:_:_T_e_m_p
           chose the location. Files written to this location are not removed
           at the end of the run (as they are with _F_i_l_e_:_:_T_e_m_p).

       ----sskkiipp--uunniiqquueenneessss
           Skip the file uniqueness check. This will give a performance boost
           at the expense of counting files with identical contents multiple
           times (if such duplicates exist).

       ----ssttddiinn--nnaammee==FFIILLEE
           Count lines streamed via _S_T_D_I_N as if they came from a file named
           FILE.

       ----ssttrriipp--ccoommmmeennttss==EEXXTT
           For each file processed, write to the current directory a version
           of the file which has blank and commented lines removed (in-line
           comments persist). The name of each stripped file is the original
           file name with ".EXT" appended to it. It is written to the current
           directory unless ----oorriiggiinnaall--ddiirr is on.

       ----oorriiggiinnaall--ddiirr
           Write the stripped files the same directory as the original files.
           Only effective in combination with ----ssttrriipp--ccoommmmeennttss.

       ----ssuumm--rreeppoorrttss
           Input arguments are report files previously created with the
           ----rreeppoorrtt--ffiillee option. Makes a cumulative set of results containing
           the sum of data from the individual report files.

       ----uunniixx
           Over-ride the operating system detection logic and run in UNIX
           mode.  See also ----wwiinnddoowwss, ----sshhooww--ooss.

       ----uussee--ssllooccccoouunntt
           If SLOCCount is installed, use its compiled executables c_count,
           java_count, pascal_count, php_count, and xml_count instead of
           cloc's counters.  SLOCCount's compiled counters are substantially
           faster than cloc's and may give a performance improvement when
           counting projects with large files.  However, these cloc-specific
           features will not be available: ----ddiiffff, ----ccoouunntt--aanndd--ddiiffff,
           ----ssttrriipp--ccoommmmeennttss, ----uunniiccooddee.

       ----wwiinnddoowwss
           Over-ride the operating system detection logic and run in Microsoft
           Windows mode.  See also ----uunniixx, ----sshhooww--ooss.

   FFiilltteerr OOppttiioonnss
       ----eexxcclluuddee--ddiirr==DDIIRR11[[,,DDIIRR22 ......]]
           Exclude the given comma separated directories from being scanned.
           For example:

                   --exclude-dir=.cache,test

           will skip all files that match "/.cache/" or "/test/" as part of
           their path. Directories named ".bzr", ".cvs", ".hg", ".git", and
           ".svn" are always excluded.  This option only works with individual
           directory names so including file path separators is not allowed.
           Use ----ffuullllppaatthh and ----nnoott--mmaattcchh--dd==RREEGGEEXX to supply a regex matching
           multiple subdirectories.

       ----eexxcclluuddee--eexxtt==EEXXTT11[[,,EEXXTT22 ......]]
           Do not count files having the given file name extensions.

       ----eexxcclluuddee--llaanngg==LL11[[,,LL22 ......]]
           Exclude the given comma separated languages from being counted.

       ----eexxcclluuddee--lliisstt--ffiillee==FFIILLEE Ignore files and/or directories whose names
       appear in FILE.  FILE should have one file name per line.  Only exact
       matches are ignored; relative path names will be resolved starting from
       the directory where cloc is invoked. See also ----lliisstt--ffiillee.
       ----ffuullllppaatthh Modifies the behavior of ----mmaattcchh--ff or ----nnoott--mmaattcchh--ff to
       include the file's path in the regex, not just the file's basename.
       (This does not expand each file to include its absolute path, instead
       it uses as much of the path as is passed in to cloc.)
       ----iinncclluuddee--llaanngg==LL11[[,,LL22 ......]]
           Count only the given comma separated languages L1, L2, L3, et
           cetera.

       ----mmaattcchh--dd==RREEGGEEXX
           Only count files in directories matching the Perl regex.  For
           example

                --match-d='/(src|include)/'

           only counts files in directory paths containing "/src/" or
           "/include/".

       ----nnoott--mmaattcchh--dd==RREEGGEEXX
           Count all files except in directories matching the Perl regex.
           Only the trailing directory name is compared, for example, when
           counting in "/usr/local/lib", only "lib" is compared to the regex.
           Add ----ffuullllppaatthh to compare parent directories to the regex.  Do not
           include file path separators at the beginning or end of the regex.

       ----mmaattcchh--ff==RREEGGEEXX
           Only count files whose basenames match the Perl regex. For example
           this only counts files at start with Widget or widget:

                --match-f='^[Ww]idget'

           Add ----ffuullllppaatthh to include parent directories in the regex instead
           of just the basename.

       ----nnoott--mmaattcchh--ff==RREEGGEEXX
           Count all files except those whose basenames match the Perl regex.
           Add ----ffuullllppaatthh to include parent directories in the regex instead
           of just the basename.

       ----sskkiipp--aarrcchhiivvee==RREEGGEEXX
           Ignore files that end with the given Perl regular expression.  For
           example, if given
             --skip-archive='(zip|tar(\.(gz|Z|bz2|xz|7z))?)'  the code will
           skip files that end with .zip, .tar, .tar.gz, .tar.Z, .tar.bz2,
           .tar.xz, and .tar.7z.

       ----sskkiipp--wwiinn--hhiiddddeenn
           On Windows, ignore hidden files.

   DDeebbuugg OOppttiioonnss
       ----ccaatteeggoorriizzeedd==FFIILLEE
           Save names of categorized files to FILE.

       ----ccoouunntteedd==FFIILLEE
           Save names of processed source files to FILE.

       ----ddiiffff--aalliiggnnmmeenntt==FFIILLEE
           Write to FILE a list of files and file pairs showing which files
           were added, removed, and/or compared during a run with ----ddiiffff.
           This switch forces the ----ddiiffff mode on.

       ----eexxppllaaiinn==LLAANNGG
           Print the filters used to remove comments for language LANG and
           exit.  In some cases the filters refer to Perl subroutines rather
           than regular expressions.  An examination of the source code may be
           needed for further explanation.

       ----hheellpp
           Print cloc's internal usage information and exit.

       ----ffoouunndd==FFIILLEE
           Save names of every file found to FILE.

       ----iiggnnoorreedd==FFIILLEE
           Save names of ignored files and the reason they were ignored to
           FILE.

       ----pprriinntt--ffiilltteerr--ssttaaggeess
           Print to _S_T_D_O_U_T processed source code before and after each filter
           is applied.

       ----sshhooww--eexxtt[[==EEXXTT]]
           Print information about all known (or just the given) file
           extensions and exit.

       ----sshhooww--llaanngg[[==LLAANNGG]]
           Print information about all known (or just the given) languages and
           exit.

       ----sshhooww--ooss
           Print the value of the operating system mode and exit.  See also
           ----uunniixx, ----wwiinnddoowwss.

       --vv[[==NN]]
           Turn on verbose with optional numeric value.

       ----vveerrbboossee[[==NN]]
           Long form of --vv.

       ----vveerrssiioonn
           Print the version of this program and exit.

       ----wwrriittee--llaanngg--ddeeff==FFIILLEE
           Writes to FILE the language processing filters then exits. Useful
           as a first step to creating custom language definitions. See also
           ----ffoorrccee--llaanngg--ddeeff, ----rreeaadd--llaanngg--ddeeff.

   OOuuttppuutt OOppttiioonnss
       ----33 Print third-generation language output.  (This option can cause
           report summation to fail if some reports were produced with this
           option while others were produced without it.)

       ----bbyy--ppeerrcceenntt XX
           Instead of comment and blank line counts, show these values as
           percentages based on the value of X in the denominator:

               X = 'c'   -> # lines of code
               X = 'cm'  -> # lines of code + comments
               X = 'cb'  -> # lines of code + blanks
               X = 'cmb' -> # lines of code + comments + blanks

           For example, if using method 'c' and your code has twice as many
           lines of comments as lines of code, the value in the comment column
           will be 200%.  The code column remains a line count.

       ----ccssvv
           Write the results as comma separated values.

       ----ccssvv--ddeelliimmiitteerr==CC
           Use the character C as the delimiter for comma separated files
           instead of ,.  This switch forces ----ccssvv to be on.

       ----jjssoonn
           Write the results in JavaScript Object Notation (JSON).

       ----mmdd
           Write the results as Markdown-formatted text.

       ----oouutt==FFIILLEE
           Synonym for ----rreeppoorrtt--ffiillee==FFIILLEE.

       ----pprrooggrreessss--rraattee==NN
           Show progress update after every N files are processed (default
           N=100). Set N to 0 to suppress progress output; useful when
           redirecting output to _S_T_D_O_U_T.

       ----qquuiieett
           Suppress all information messages except for the final report.

       ----rreeppoorrtt--ffiillee==FFIILLEE
           Write the results to FILE instead of standard output.

       ----ssqqll==FFIILLEE
           Write results as SQL CREATE and INSERT statements which can be read
           by a database program such as SQLite. If FILE is --, output is sent
           to _S_T_D_O_U_T.

       ----ssqqll--aappppeenndd
           Append SQL insert statements to the file specified by ----ssqqll and do
           not generate table creation option.

       ----ssqqll--pprroojjeecctt==NNAAMMEE
           Use nnaammee as the project identifier for the current run. Only valid
           with the ----ssqqll option.

       ----ssqqll--ssttyyllee==SSTTYYLLEE
           Write SQL statements in the given style instead of the default
           SQLite format.  Currently, the only style option is OOrraaccllee.

       ----ssuumm--oonnee
           For plain text reports, show the SUM: output line even if only one
           input file is processed.

       ----xxmmll
           Write the results in XML.

       ----xxssll[[==FFIILLEE]]
           Reference FILE as an XSL stylesheet within the XML output. If FILE
           is not given, writes a default stylesheet, cloc.xsl. This switch
           forces ----xxmmll to be on.

       ----yyaammll
           Write the results in YAML.

EEXXAAMMPPLLEESS
       Count the lines of code in the Perl 5.10.0 compressed tar file on a
       UNIX-like operating system:

         cloc perl-5.10.0.tar.gz

       Count the changes in files, code, and comments between Python releases
       2.6.6 and 2.7:

         cloc --diff Python-2.6.6.tar.bz  Python-2.7.tar.bz2

       To see how cloc aligns files for comparison between two code bases, use
       the ----ddiiffff--aalliiggnnmmeenntt==FFIILLEE option.  Here the alignment information is
       written to "align.txt":

         cloc --diff-aligment=align.txt gcc-4.4.0.tar.bz2  gcc-4.5.0.tar.bz2

       Print the recognized languages

         cloc --show-lang

       Remove comments from "foo.c" and save the result in "foo.c.nc"

         cloc --strip-comments=nc foo.c

       Additional examples can be found at <https://github.com/AlDanial/cloc>.

EENNVVIIRROONNMMEENNTT
       None.

FFIILLEESS
       None.

SSEEEE AALLSSOO
       _s_l_o_c_c_o_u_n_t(1)

AAUUTTHHOORRSS
       The cloc program was written by Al Danial <al.danial@gmail.com> and is
       Copyright (C) 2006-2017 <al.danial@gmail.com>.

       The manual page was originally written by Jari Aalto
       <jari.aalto@cante.net>.

       Both the code and documentation is released under the GNU GPL version 2
       or (at your option) any later version. For more information about
       license, visit <http://www.gnu.org/copyleft/gpl.html>.

cloc                              2018-02-03                           cloc(1)
